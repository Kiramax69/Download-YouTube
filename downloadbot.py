import logging
import os
import yt_dlp
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage

# –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
TOKEN = "7787818513:AAEZwJ-6tl1B7NN_GdgL0P1GqXWiqVKLEBU"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–º—è—Ç—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
dp = Dispatcher(bot, storage=storage)  # –ü–µ—Ä–µ–¥–∞–µ–º bot –≤ Dispatcher —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä storage

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å YouTube, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–∫–∞—á–∞—Ç—å –µ–≥–æ.")

@dp.message_handler(content_types=types.ContentType.TEXT)
async def process_video_link(message: types.Message):
    url = message.text.strip()

    ydl_opts = {"quiet": True}
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)
            formats = info.get("formats", [])

        keyboard = InlineKeyboardMarkup(row_width=2)
        quality_options = {}

        for f in formats:
            if f.get("vcodec") != "none" and f.get("acodec") != "none":  # –¢–æ–ª—å–∫–æ –≤–∏–¥–µ–æ —Å –∞—É–¥–∏–æ
                res = f.get("format_note", "Unknown")
                file_size = f.get("filesize", 0) or f.get("filesize_approx", 0)  # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞

                if file_size > 2 * 1024 * 1024 * 1024:  # –ë–æ–ª—å—à–µ 2–ì–ë?
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç

                quality_options[res] = f["format_id"]

        for res, format_id in quality_options.items():
            keyboard.insert(InlineKeyboardButton(text=res, callback_data=f"download|{url}|{format_id}"))

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ
        keyboard.insert(InlineKeyboardButton(text="üéµ –°–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ (MP3)", callback_data=f"download_audio|{url}"))

        if quality_options:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:", reply_markup=keyboard)
        else:
            await message.answer("–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (>2–ì–ë) –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")

    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
        logging.error(f"–û—à–∏–±–∫–∞: {e}")

@dp.callback_query(lambda c: c.data.startswith("download") or c.data.startswith("download_audio"))
async def download_video(callback_query: types.CallbackQuery):
    data = callback_query.data.split("|")
    is_audio = data[0] == "download_audio"
    url = data[1]
    format_id = data[2] if not is_audio else "bestaudio"

    user_id = callback_query.from_user.id
    filename = f"{user_id}.{'mp4' if not is_audio else 'mp3'}"

    ydl_opts = {
        "outtmpl": filename,
        "quiet": True,
        "format": format_id,
        "postprocessors": [{"key": "FFmpegExtractAudio", "preferredcodec": "mp3"}] if is_audio else [],
    }

    progress_msg = await bot.send_message(user_id, "‚è≥ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ...")

    try:
        loop = asyncio.get_event_loop()
        await loop.run_in_executor(None, lambda: yt_dlp.YoutubeDL(ydl_opts).download([url]))

        await progress_msg.edit_text("‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ...")

        with open(filename, "rb") as file:
            if is_audio:
                await bot.send_audio(user_id, file, title="–ê—É–¥–∏–æ –∏–∑ YouTube")
            else:
                await bot.send_video(user_id, file)

        await progress_msg.delete()

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
        asyncio.create_task(delete_file_after_delay(filename, delay=600))

    except Exception as e:
        await progress_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ.")
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: {e}")

async def delete_file_after_delay(file_path, delay=600):
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 –º–∏–Ω—É—Ç)."""
    await asyncio.sleep(delay)
    if os.path.exists(file_path):
        os.remove(file_path)

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())
