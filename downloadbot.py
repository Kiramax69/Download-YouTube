import logging
import os
import yt_dlp
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "7787818513:AAEZwJ-6tl1B7NN_GdgL0P1GqXWiqVKLEBU"
MAX_FILE_SIZE = 50 * 1024 * 1024  # 50 –ú–ë –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram
TEMP_DIR = "temp_downloads"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not os.path.exists(TEMP_DIR):
    os.makedirs(TEMP_DIR)

async def on_startup(_):
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")

@dp.message(commands=['start', 'help'])
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å YouTube.\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏.\n"
        "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –≤–∏–¥–µ–æ –¥–æ 50 –ú–ë (Telegram –ª–∏–º–∏—Ç)"
    )
    await message.answer(welcome_text)

@dp.message(content_types=['text'])
async def process_link(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–∏–¥–µ–æ"""
    url = message.text.strip()
    
    try:
        ydl_opts = {
            "quiet": True,
            "no_warnings": True,
            "format": "bestvideo+bestaudio/best",
        }
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)
            formats = info.get("formats", [])
            title = info.get("title", "Video")

        keyboard = InlineKeyboardMarkup(row_width=2)
        quality_options = {}

        for f in formats:
            if f.get("vcodec") != "none" and f.get("acodec") != "none":
                res = f.get("format_note", "Unknown")
                file_size = f.get("filesize") or f.get("filesize_approx") or 0
                
                if file_size and file_size <= MAX_FILE_SIZE:
                    quality_options[res] = f["format_id"]

        if not quality_options:
            await message.answer(
                "–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (>50–ú–ë) –∏–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ."
            )
            return

        for res, format_id in quality_options.items():
            button = InlineKeyboardButton(
                text=f"{res}",
                callback_data=f"video|{url}|{format_id}"
            )
            keyboard.insert(button)

        audio_button = InlineKeyboardButton(
            text="üéµ –¢–æ–ª—å–∫–æ –∞—É–¥–∏–æ (MP3)",
            callback_data=f"audio|{url}"
        )
        keyboard.add(audio_button)

        await message.answer(
            f"–í–∏–¥–µ–æ: {title}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ:",
            reply_markup=keyboard
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏: {e}")
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∏–ª–∏ –≤–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")

@dp.callback_query(lambda c: c.data.startswith(("video|", "audio|")))
async def process_download(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ"""
    await bot.answer_callback_query(callback.id)
    
    data = callback.data.split("|")
    download_type, url = data[0], data[1]
    format_id = data[2] if download_type == "video" else "bestaudio"
    
    user_id = callback.from_user.id
    file_ext = "mp3" if download_type == "audio" else "mp4"
    filename = os.path.join(TEMP_DIR, f"{user_id}_{format_id}.{file_ext}")

    ydl_opts = {
        "outtmpl": filename,
        "quiet": True,
        "format": format_id,
        "merge_output_format": "mp4",
    }
    
    if download_type == "audio":
        ydl_opts.update({
            "postprocessors": [{
                "key": "FFmpegExtractAudio",
                "preferredcodec": "mp3",
                "preferredquality": "192",
            }]
        })

    progress_msg = await bot.send_message(user_id, "‚è≥ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å...")

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])

        file_size = os.path.getsize(filename)
        if file_size > MAX_FILE_SIZE:
            await progress_msg.edit_text("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            os.remove(filename)
            return

        await progress_msg.edit_text("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Telegram...")
        
        with open(filename, "rb") as file:
            if download_type == "audio":
                await bot.send_audio(user_id, file)
            else:
                await bot.send_video(user_id, file)

        await progress_msg.delete()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
        await progress_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏")

    finally:
        if os.path.exists(filename):
            os.remove(filename)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
